name: CI
on:
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  analyze_and_test:
    name: Run Flutter analyze & test
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - name: Sending start message to Dev channel
        uses: lienminhquang/telegram_action@v1.9
        with:
          TELEGRAM_TOKEN: ${{ secrets.ZENMODE_DEV_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_TO: ${{ secrets.ZENMODE_MESSAGES_TELEGRAM_CHANNEL_ID }}
          message: |
            --------------------------
            [CI] üõ†Ô∏è Starting CI...

      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2
        with:
          version: '1.7'
          force: true

      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Decode main .env file
        run: echo "${{ secrets.ENV_BASE64 }}" | base64 --decode > .env

      - run: flutter pub get

      - run: flutter analyze

      - run: flutter test

      - name: Sending success message to Dev channel
        if: ${{ success() }}
        uses: lienminhquang/telegram_action@v1.9
        with:
          TELEGRAM_TOKEN: ${{ secrets.ZENMODE_DEV_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_TO: ${{ secrets.ZENMODE_MESSAGES_TELEGRAM_CHANNEL_ID }}
          message: |
            [CI] ‚úÖ - Analyze & Test

      - name: Sending error message to Dev channel if needed
        uses: lienminhquang/telegram_action@v1.9
        if: ${{ failure() }}
        with:
          TELEGRAM_TOKEN: ${{ secrets.ZENMODE_DEV_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_TO: ${{ secrets.ZENMODE_MESSAGES_TELEGRAM_CHANNEL_ID }}
          message: |
            [CI] ‚ùå - Analyze & Test

  build_ios_app:
    name: Build iOS
    needs: [analyze_and_test]
    runs-on: self-hosted
    steps:
      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2
        with:
          version: '1.7'
          force: true
      
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Decode main .env file
        run: echo "${{ secrets.ENV_BASE64 }}" | base64 --decode > .env
      
      - run: flutter pub get
      
      - run: flutter build ios --release --no-codesign --verbose

      - name: Decode Fastlane iOS Environment file
        run: echo "${{ secrets.IOS_FASTLANE_EVN_FILE_BASE64 }}" | base64 --decode > ios/.env

      - uses: maierj/fastlane-action@v3.0.0
        with:
          lane: "build_and_upload_to_testfilght"
          subdirectory: "ios"

      - name: Sending error message to Dev channel if needed
        uses: lienminhquang/telegram_action@v1.9
        if: ${{ success() }}
        with:
          TELEGRAM_TOKEN: ${{ secrets.ZENMODE_DEV_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_TO: ${{ secrets.ZENMODE_MESSAGES_TELEGRAM_CHANNEL_ID }}
          message: |
            [CI] ‚úÖ - iOS

      - name: Sending error message to Dev channel if needed
        uses: lienminhquang/telegram_action@v1.9
        if: ${{ failure() }}
        with:
          TELEGRAM_TOKEN: ${{ secrets.ZENMODE_DEV_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_TO: ${{ secrets.ZENMODE_MESSAGES_TELEGRAM_CHANNEL_ID }}
          message: |
            [CI] ‚ùå - iOS

  build_android_app:
    name: Build Android
    runs-on: self-hosted
    needs: [analyze_and_test]
    steps:
      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2
        with:
          version: '1.7'
          force: true

      - name: Checking out to current branch
        uses: actions/checkout@v3

      - name: Setting up Java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "12"

      - name: Setting up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Decode main .env file
        run: echo "${{ secrets.ENV_BASE64 }}" | base64 --decode > .env

      - name: Decoding android/keystore.jks
        run: echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-zenmode.jks

      - name: Decoding android/key.properties
        run: echo "${{ secrets.ANDROID_KEY_PROPERTIES_BASE64 }}" | base64 --decode > android/key.properties

      - name: Getting dependencies
        run: flutter pub get

      - name: Building Android appbundle
        run: flutter build apk --verbose --target-platform android-arm64

      - name: Sending success message to Dev channel
        if: ${{ success() }}
        uses: lienminhquang/telegram_action@v1.9
        with:
          TELEGRAM_TOKEN: ${{ secrets.ZENMODE_DEV_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_TO: ${{ secrets.ZENMODE_MESSAGES_TELEGRAM_CHANNEL_ID }}
          message: |
            [CI] ‚úÖ - Android

      - name: "Send the APK to Telegram"
        run: |
          curl -F document=@build/app/outputs/flutter-apk/app-release.apk \
          -F chat_id=${{ secrets.ZENMODE_MESSAGES_TELEGRAM_CHANNEL_ID }} \
          -F caption="Template-$(date +'%Y%m%d-%H%M')" \
          "https://api.telegram.org/bot${{ secrets.ZENMODE_DEV_TELEGRAM_BOT_TOKEN }}/sendDocument"

      - name: Sending error message to Dev channel if needed
        uses: lienminhquang/telegram_action@v1.9
        if: ${{ failure() }}
        with:
          TELEGRAM_TOKEN: ${{ secrets.ZENMODE_DEV_TELEGRAM_BOT_TOKEN }}
          TELEGRAM_TO: ${{ secrets.ZENMODE_MESSAGES_TELEGRAM_CHANNEL_ID }}
          message: |
            [CI] ‚ùå - Android


# Firebase flow

# - name: Uploading to Firebase App Distribution
#   uses: wzieba/Firebase-Distribution-Github-Action@v1
#   with:
#     appId: ${{secrets.FIREBASE_APP_ID}}
#     serviceCredentialsFileContent: ${{ secrets.FIREBASE_CREDENTIAL_JSON_FILE_CONTENT }}
#     groups: android-testers
#     file: build/app/outputs/bundle/release/app-release.aab